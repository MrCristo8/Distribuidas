package beans;
// Generated Dec 13, 2018 12:47:24 AM by Hibernate Tools 4.3.1

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import model.WbCrMovement;

/**
 * MovementBean generated by hbm2java
 */
@ManagedBean()
@SessionScoped
public class MovementBean implements java.io.Serializable
{

    private String movementName;
    private String movementDirection;
    private Integer movementId;
    private String filterString;
    private WbCrMovement current;
    private ArrayList<WbCrMovement> filteredList;
    private ArrayList<WbCrMovement> movementList;

    private Set wbCrStocks = new HashSet(0);

    public MovementBean()
    {
    }

    public MovementBean(String movementName, String movementDirection)
    {
        this.movementName = movementName;
        this.movementDirection = movementDirection;
    }

    public MovementBean(String movementName, String movementDirection, Set wbCrStocks)
    {
        this.movementName = movementName;
        this.movementDirection = movementDirection;
        this.wbCrStocks = wbCrStocks;
    }

    public String getMovementName()
    {
        return this.movementName;
    }

    public void setMovementName(String movementName)
    {
        this.movementName = movementName;
    }

    public String getMovementDirection()
    {
        return this.movementDirection;
    }

    public void setMovementDirection(String movementDirection)
    {
        this.movementDirection = movementDirection;
    }

    public Set getWbCrStocks()
    {
        return this.wbCrStocks;
    }

    public void setWbCrStocks(Set wbCrStocks)
    {
        this.wbCrStocks = wbCrStocks;
    }

    public Integer getMovementId()
    {
        return movementId;
    }

    public void setMovementId(Integer movementId)
    {
        this.movementId = movementId;
    }

    public ArrayList<WbCrMovement> getMovementList()
    {
        movementList = controller.MovementPersistance.getInstance().getAll();
        return movementList;
    }

    public String getFilterString()
    {
        return filterString;
    }

    public void setFilterString(String filterString)
    {
        this.filterString = filterString;
    }

    public ArrayList<WbCrMovement> getFilteredList()
    {
        if (filteredList == null)
        {
            filteredList = new ArrayList<>();
        }
        return filteredList;
    }

    public WbCrMovement getCurrent()
    {
        return current;
    }

    public void setCurrent(WbCrMovement current)
    {
        this.current = current;
    }

    
    public void filter()
    {
        if (movementList != null && getFilteredList() != null && filterString != null)
        {
            System.out.println("OK");
            if (movementList.size() >= 1)
            {
                getFilteredList().clear();
                movementList.forEach(x ->
                {
                    if (x.getMovementName().toUpperCase().contains(filterString.toUpperCase()))
                    {
                        getFilteredList().add(x);
                    }
                });

            }
        } else
        {
            System.out.println("NO OK");
        }
    }
    
      public void delete(WbCrMovement art)
    {
        controller.MovementPersistance.getInstance().deleteObject(art.getMovementId());
    }

    public void Change()
    {
        try
        {
            FacesContext.getCurrentInstance().getExternalContext().redirect("new.xhtml");
        } catch (IOException ex)
        {
            System.out.println(ex.getMessage());
        }
    }
    
    public void prepareUpdate(WbCrMovement art_update)
    {
        setCurrent(art_update);
        try
        {
            FacesContext.getCurrentInstance().getExternalContext().redirect("update.xhtml");
        } catch (IOException ex)
        {
            Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void update()
    {
        if(controller.MovementPersistance.getInstance().updateObject(current).equals("OK"))
        {
            try
            {
                FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
            } catch (IOException ex)
            {
                Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            
        }
    }
}
