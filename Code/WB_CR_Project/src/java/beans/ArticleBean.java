package beans;
// Generated Dec 13, 2018 12:47:24 AM by Hibernate Tools 4.3.1

import controller.ArticlePersistance;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import model.WbCrArticle;

/**
 * ArticleBeane generated by hbm2java
 */
@ManagedBean()
@SessionScoped
public class ArticleBean implements java.io.Serializable {

    private String articleName;
    private double articlePrice;
    private int articleStock;
    private ArrayList<model.WbCrArticle> articleList;
    private String filterString;
    private ArrayList<model.WbCrArticle> filteredList;
    private Set wbCrStocks = new HashSet(0);
    private Set wbCrBilldetails = new HashSet(0);
    private WbCrArticle current;

    public ArticleBean() {
    }

    public ArticleBean(String articleName, double articlePrice, int articleStock) {
        this.articleName = articleName;
        this.articlePrice = articlePrice;
        this.articleStock = articleStock;
    }

    public ArticleBean(String articleName, double articlePrice, int articleStock, Set wbCrStocks, Set wbCrBilldetails) {
        this.articleName = articleName;
        this.articlePrice = articlePrice;
        this.articleStock = articleStock;
        this.wbCrStocks = wbCrStocks;
        this.wbCrBilldetails = wbCrBilldetails;
    }

    public void setArticleName(String articleName) {
        this.articleName = articleName;
    }

    public String getArticleName() {
        return articleName;
    }

    public double getArticlePrice() {
        return this.articlePrice;
    }

    public void setArticlePrice(double articlePrice) {
        this.articlePrice = articlePrice;
    }

    public int getArticleStock() {
        return articleStock;
    }

    public void setArticleStock(int articleStock) {
        this.articleStock = articleStock;
    }

    public Set getWbCrStocks() {
        return wbCrStocks;
    }

    public void setWbCrStocks(Set wbCrStocks) {
        this.wbCrStocks = wbCrStocks;
    }

    public Set getWbCrBilldetails() {
        return wbCrBilldetails;
    }

    public ArrayList<model.WbCrArticle> getArticleList() {
        articleList = controller.ArticlePersistance.getInstance().getAll();
        return articleList;
    }

    public String getFilterString() {
        return filterString;
    }

    public void setFilterString(String filterString) {
        this.filterString = filterString;
    }

    public ArrayList<WbCrArticle> getFilteredList() {
        if (filteredList == null) {
            filteredList = new ArrayList<>();
        }
        return filteredList;
    }

    public WbCrArticle getCurrent()
    {
        return current;
    }

    public void setCurrent(WbCrArticle current)
    {
        this.current = current;
    }

    
    public void filter() {
        if (articleList != null && getFilteredList() != null && filterString != null) {
            if (articleList.size() >= 1) {
                getFilteredList().clear();
                articleList.forEach(x
                        -> {
                    if (x.getArticleName().toUpperCase().contains(filterString.toUpperCase())) {
                        getFilteredList().add(x);
                    }
                });

            }
        }
    }

    public void delete(WbCrArticle art) {
        controller.ArticlePersistance.getInstance().deleteObject(art.getArticleId());
    }

    public void Change() {
        try {
            FacesContext.getCurrentInstance().getExternalContext().redirect("new.xhtml");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void Add() {
        int id = 1;
        List<WbCrArticle> articles = ArticlePersistance.getInstance().getAll();
        for (WbCrArticle article : articles) {
            if (article.getArticleId() != id) {
                continue;
            }
            id++;
        }
        ArticlePersistance.getInstance().persistObject(new WbCrArticle(id, articleName, articlePrice, articleStock));
        try {
            articleName="";
            articlePrice=0;
            articleStock=0;
            FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    public void prepareUpdate(WbCrArticle art_update)
    {
        setCurrent(art_update);
        try
        {
            FacesContext.getCurrentInstance().getExternalContext().redirect("update.xhtml");
        } catch (IOException ex)
        {
            Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void update()
    {
        if(controller.ArticlePersistance.getInstance().updateObject(current).equals("OK"))
        {
            try
            {
                FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
            } catch (IOException ex)
            {
                Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            
        }
    }
}
