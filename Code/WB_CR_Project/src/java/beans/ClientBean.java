package beans;
// Generated Dec 13, 2018 12:47:24 AM by Hibernate Tools 4.3.1

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import model.WbCrClient;

/**
 * ClientBean generated by hbm2java
 */
@ManagedBean()
@SessionScoped
public class ClientBean implements java.io.Serializable
{

    private String clientDni;
    private String clientName;
    private String clientAddress;
    private String filterString;
    private WbCrClient current;
    private ArrayList<WbCrClient> filteredList;
    private ArrayList<model.WbCrClient> clientList;
    private Set wbCrBills = new HashSet(0);

    public ClientBean()
    {
    }

    public ClientBean(int clientId, String clientDni, String clientName)
    {
        this.clientDni = clientDni;
        this.clientName = clientName;
    }

    public ClientBean(int clientId, String clientDni, String clientName, String clientAddress, Set wbCrBills)
    {
        this.clientDni = clientDni;
        this.clientName = clientName;
        this.clientAddress = clientAddress;
        this.wbCrBills = wbCrBills;
    }

    public String getClientDni()
    {
        return this.clientDni;
    }

    public void setClientDni(String clientDni)
    {
        this.clientDni = clientDni;
    }

    public String getClientName()
    {
        return this.clientName;
    }

    public void setClientName(String clientName)
    {
        this.clientName = clientName;
    }

    public String getClientAddress()
    {
        return this.clientAddress;
    }

    public void setClientAddress(String clientAddress)
    {
        this.clientAddress = clientAddress;
    }

    public Set getWbCrBills()
    {
        return this.wbCrBills;
    }

    public void setWbCrBills(Set wbCrBills)
    {
        this.wbCrBills = wbCrBills;
    }

    public ArrayList<WbCrClient> getClientList()
    {

        clientList = controller.ClientPersistance.getInstance().getAll();
        return clientList;
    }

    public String getFilterString()
    {
        return filterString;
    }

    public void setFilterString(String filterString)
    {
        this.filterString = filterString;
    }

    public ArrayList<WbCrClient> getFilteredList()
    {
        if(filteredList == null) filteredList = new ArrayList<>();
        return filteredList;
    }

    public WbCrClient getCurrent()
    {
        return current;
    }

    public void setCurrent(WbCrClient current)
    {
        this.current = current;
    }
    
    

    public void filter()
    {
        if (clientList != null && getFilteredList() != null && filterString != null)
        {
            if (clientList.size() >= 1)
            {
                getFilteredList().clear();
                clientList.forEach(x ->
                {
                    if (x.getClientName().toUpperCase().contains(filterString.toUpperCase()))
                    {
                        getFilteredList().add(x);
                    }
                });

            }
        }

    }
    
    public void delete(WbCrClient art)
    {        
        controller.ClientPersistance.getInstance().deleteObject(art.getClientId());
    }
    
    public void prepareUpdate(WbCrClient art_update)
    {
        setCurrent(art_update);
        try
        {
            FacesContext.getCurrentInstance().getExternalContext().redirect("update.xhtml");
        } catch (IOException ex)
        {
            Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void update()
    {
        if(controller.ClientPersistance.getInstance().updateObject(current).equals("OK"))
        {
            try
            {
                FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
            } catch (IOException ex)
            {
                Logger.getLogger(ArticleBean.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            
        }
    }

}
