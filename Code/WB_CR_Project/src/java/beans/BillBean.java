package beans;
// Generated Dec 13, 2018 12:47:24 AM by Hibernate Tools 4.3.1

import controller.BillPersistance;
import controller.CityPersistance;
import controller.ClientPersistance;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import model.WbCrBill;
import model.WbCrCity;
import model.WbCrClient;

/**
 * BillBean generated by hbm2java
 */
@ManagedBean()
@SessionScoped
public class BillBean implements java.io.Serializable {

    private CityBean wbCrCity;
    private ClientBean wbCrClient;
    private Date billDate;
    private Set wbCrBilldetails = new HashSet(0);
    private List<WbCrBill> billsList;
    private ArrayList<WbCrBill> filteredList;
    private String filterString;
    private WbCrCity city;
    private WbCrClient client;
    private WbCrBill current;
    private List<WbCrClient> clientList;
    private List<WbCrCity> cityList;

    public BillBean() {
    }

    public BillBean(CityBean wbCrCity, ClientBean wbCrClient, Date billDate) {
        this.wbCrCity = wbCrCity;
        this.wbCrClient = wbCrClient;
        this.billDate = billDate;
    }

    public BillBean(CityBean wbCrCity, ClientBean wbCrClient, Date billDate, Set wbCrBilldetails) {
        this.wbCrCity = wbCrCity;
        this.wbCrClient = wbCrClient;
        this.billDate = billDate;
        this.wbCrBilldetails = wbCrBilldetails;
    }

    public CityBean getWbCrCity() {
        return this.wbCrCity;
    }

    public void setWbCrCity(CityBean wbCrCity) {
        this.wbCrCity = wbCrCity;
    }

    public ClientBean getWbCrClient() {
        return this.wbCrClient;
    }

    public void setWbCrClient(ClientBean wbCrClient) {
        this.wbCrClient = wbCrClient;
    }

    public Date getBillDate() {
        return this.billDate;
    }

    public void setBillDate(Date billDate) {
        this.billDate = billDate;
    }

    public Set getWbCrBilldetails() {
        return this.wbCrBilldetails;
    }

    public void setWbCrBilldetails(Set wbCrBilldetails) {
        this.wbCrBilldetails = wbCrBilldetails;
    }

    public List<WbCrBill> getBillsList() {
        billsList = BillPersistance.getInstance().getAll();
        return billsList;
    }

    public void setBillsList(List<WbCrBill> billsList) {
        this.billsList = billsList;
    }

    public ArrayList<WbCrBill> getFilteredList() {
        if (filteredList == null) {
            filteredList = new ArrayList<>();
        }
        return filteredList;
    }

    public void setFilteredList(ArrayList<WbCrBill> filteredList) {
        this.filteredList = filteredList;
    }

    public String getFilterString() {
        return filterString;
    }

    public void setFilterString(String filterString) {
        this.filterString = filterString;
    }

    public WbCrCity getCity() {
        return city;
    }

    public void setCity(WbCrCity city) {
        this.city = city;
    }

    public WbCrClient getClient() {
        return client;
    }

    public void setClient(WbCrClient client) {
        this.client = client;
    }

    public WbCrBill getCurrent() {
        return current;
    }

    public void setCurrent(WbCrBill current) {
        this.current = current;
    }

    public List<WbCrClient> getClientList() {
        clientList=ClientPersistance.getInstance().getAll();
        return clientList;
    }

    public void setClientList(List<WbCrClient> clientList) {
        this.clientList = clientList;
    }

    public List<WbCrCity> getCityList() {
        cityList=CityPersistance.getInstance().getAll();
        return cityList;
    }

    public void setCityList(List<WbCrCity> cityList) {
        this.cityList = cityList;
    }

    public void filter() {
        if (billsList != null && getFilteredList() != null && filterString != null) {
            if (billsList.size() >= 1) {
                getFilteredList().clear();
                billsList.forEach(x
                        -> {
                    if (x.getClientId().getClientName().toUpperCase().contains(filterString.toUpperCase())) {
                        getFilteredList().add(x);
                    }
                });

            }
        }
    }

    public void delete(WbCrBill art) {
        controller.ArticlePersistance.getInstance().deleteObject(art.getBillId());
    }

    public void Change() {
        try {
            FacesContext.getCurrentInstance().getExternalContext().redirect("new.xhtml");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void Add() {
        int id = 1;
        List<WbCrBill> bills = BillPersistance.getInstance().getAll();
        for (WbCrBill bill : bills) {
            if (bill.getBillId() != id) {
                continue;
            }
            id++;
        }
        BillPersistance.getInstance().persistObject(new WbCrBill(billDate, id, city, client));
        try {
            FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void prepareUpdate(WbCrBill art_update) {
        setCurrent(art_update);
        try {
            FacesContext.getCurrentInstance().getExternalContext().redirect("update.xhtml");
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void update() {
        if (BillPersistance.getInstance().updateObject(current).equals("OK")) {
            try {
                FacesContext.getCurrentInstance().getExternalContext().redirect("list.xhtml");
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        } else {

        }
    }
}
